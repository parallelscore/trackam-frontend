// TrackAm Service Worker - Comprehensive Offline Functionality
// Version: 1.0.0

// Workbox manifest injection point
const precacheManifest = self.__WB_MANIFEST || [];

const CACHE_NAME = 'trackam-v1';
const API_CACHE = 'trackam-api-v1';
const IMAGES_CACHE = 'trackam-images-v1';
const STATIC_CACHE = 'trackam-static-v1';

// Cache strategies configuration
const CACHE_STRATEGIES = {
  CACHE_FIRST: 'cache-first',
  NETWORK_FIRST: 'network-first',
  STALE_WHILE_REVALIDATE: 'stale-while-revalidate',
  NETWORK_ONLY: 'network-only',
  CACHE_ONLY: 'cache-only'
};

// Resources to cache immediately on install
const STATIC_ASSETS = [
  '/',
  '/manifest.json',
  // Note: index.html and offline.html will come from Workbox manifest
  // Add critical CSS/JS files that will be generated by Vite
];

// API endpoints to cache with different strategies
const API_ROUTES = {
  // Cache-first for relatively static data
  CACHE_FIRST: [
    '/api/auth/user',
    '/api/delivery/analytics',
    '/api/vendor/stats'
  ],
  // Network-first for frequently changing data
  NETWORK_FIRST: [
    '/api/delivery/track',
    '/api/rider/location',
    '/api/delivery/status'
  ],
  // Stale-while-revalidate for balanced approach
  STALE_WHILE_REVALIDATE: [
    '/api/delivery/list',
    '/api/rider/list',
    '/api/vendor/deliveries'
  ]
};

// Utility functions
const isApiRequest = (url) => url.pathname.startsWith('/api');
const isImageRequest = (url) => /\.(jpg|jpeg|png|gif|webp|svg|ico)$/i.test(url.pathname);
const isStaticAsset = (url) => /\.(js|css|woff|woff2|ttf|eot)$/i.test(url.pathname);

// Cache management utilities
const addToCache = async (cacheName, request, response) => {
  try {
    const cache = await caches.open(cacheName);
    await cache.put(request, response.clone());
  } catch (error) {
    console.error('Failed to cache response:', error);
  }
};

const getFromCache = async (cacheName, request) => {
  try {
    const cache = await caches.open(cacheName);
    return await cache.match(request);
  } catch (error) {
    console.error('Failed to get from cache:', error);
    return null;
  }
};

// Cache strategy implementations
const cacheFirst = async (request, cacheName) => {
  const cachedResponse = await getFromCache(cacheName, request);
  if (cachedResponse) {
    return cachedResponse;
  }

  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      await addToCache(cacheName, request, networkResponse);
    }
    return networkResponse;
  } catch (error) {
    // Return cached version if available, otherwise return offline page
    return cachedResponse || await getOfflineFallback(request);
  }
};

const networkFirst = async (request, cacheName) => {
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      await addToCache(cacheName, request, networkResponse);
    }
    return networkResponse;
  } catch (error) {
    const cachedResponse = await getFromCache(cacheName, request);
    return cachedResponse || await getOfflineFallback(request);
  }
};

const staleWhileRevalidate = async (request, cacheName) => {
  const cachedResponse = await getFromCache(cacheName, request);
  
  // Start network request (don't await it)
  const networkPromise = fetch(request).then(async (networkResponse) => {
    if (networkResponse.ok) {
      await addToCache(cacheName, request, networkResponse);
    }
    return networkResponse;
  }).catch(() => null);

  // Return cached response immediately if available
  if (cachedResponse) {
    return cachedResponse;
  }

  // If no cached response, wait for network
  try {
    return await networkPromise;
  } catch (error) {
    return await getOfflineFallback(request);
  }
};

// Offline fallback handling
const getOfflineFallback = async (request) => {
  const url = new URL(request.url);
  
  if (isApiRequest(url)) {
    // Return a proper JSON response for API requests
    return new Response(
      JSON.stringify({
        success: false,
        error: 'Offline - cached data not available',
        offline: true,
        timestamp: Date.now()
      }),
      {
        status: 503,
        statusText: 'Service Unavailable',
        headers: {
          'Content-Type': 'application/json',
        }
      }
    );
  }

  // For navigation requests, return offline page
  if (request.mode === 'navigate') {
    const offlineResponse = await getFromCache(STATIC_CACHE, '/offline.html');
    return offlineResponse || new Response('Offline', { status: 503 });
  }

  // For other requests, return a minimal response
  return new Response('Offline', { status: 503 });
};

// Determine cache strategy based on request
const getCacheStrategy = (url) => {
  if (isApiRequest(url)) {
    // Check API route patterns
    for (const [strategy, routes] of Object.entries(API_ROUTES)) {
      if (routes.some(route => url.pathname.startsWith(route))) {
        return strategy.toLowerCase().replace('_', '-');
      }
    }
    return CACHE_STRATEGIES.NETWORK_FIRST; // Default for API
  }

  if (isImageRequest(url)) {
    return CACHE_STRATEGIES.CACHE_FIRST;
  }

  if (isStaticAsset(url)) {
    return CACHE_STRATEGIES.STALE_WHILE_REVALIDATE;
  }

  return CACHE_STRATEGIES.NETWORK_FIRST; // Default strategy
};

// Service Worker Event Handlers
self.addEventListener('install', (event) => {
  console.log('TrackAm Service Worker installing...');
  
  event.waitUntil(
    Promise.all([
      // Cache static assets from Workbox manifest
      caches.open(STATIC_CACHE).then((cache) => {
        const workboxUrls = precacheManifest.map(entry => entry.url || entry);
        const allUrls = [...STATIC_ASSETS, ...workboxUrls];
        // Remove duplicates using Set
        const uniqueUrls = [...new Set(allUrls)];
        return cache.addAll(uniqueUrls);
      })
      // Don't skip waiting automatically - let user decide
      // self.skipWaiting()
    ])
  );
});

self.addEventListener('activate', (event) => {
  console.log('TrackAm Service Worker activating...');
  
  event.waitUntil(
    Promise.all([
      // Clean up old caches
      caches.keys().then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (cacheName !== CACHE_NAME && 
                cacheName !== API_CACHE && 
                cacheName !== IMAGES_CACHE && 
                cacheName !== STATIC_CACHE) {
              console.log('Deleting old cache:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      })
      // Don't claim clients immediately - wait for user action
      // self.clients.claim()
    ])
  );
});

self.addEventListener('fetch', (event) => {
  const request = event.request;
  const url = new URL(request.url);

  // Skip non-GET requests
  if (request.method !== 'GET') {
    return;
  }

  // Skip chrome-extension and other non-http(s) requests
  if (!url.protocol.startsWith('http')) {
    return;
  }

  const strategy = getCacheStrategy(url);
  let cacheName = CACHE_NAME;

  // Determine appropriate cache
  if (isApiRequest(url)) {
    cacheName = API_CACHE;
  } else if (isImageRequest(url)) {
    cacheName = IMAGES_CACHE;
  } else if (isStaticAsset(url)) {
    cacheName = STATIC_CACHE;
  }

  // Apply caching strategy
  event.respondWith(
    (async () => {
      try {
        switch (strategy) {
          case CACHE_STRATEGIES.CACHE_FIRST:
            return await cacheFirst(request, cacheName);
          case CACHE_STRATEGIES.NETWORK_FIRST:
            return await networkFirst(request, cacheName);
          case CACHE_STRATEGIES.STALE_WHILE_REVALIDATE:
            return await staleWhileRevalidate(request, cacheName);
          case CACHE_STRATEGIES.NETWORK_ONLY:
            return await fetch(request);
          case CACHE_STRATEGIES.CACHE_ONLY:
            return await getFromCache(cacheName, request) || await getOfflineFallback(request);
          default:
            return await networkFirst(request, cacheName);
        }
      } catch (error) {
        console.error('Fetch event error:', error);
        return await getOfflineFallback(request);
      }
    })()
  );
});

// Background sync for offline actions
self.addEventListener('sync', (event) => {
  console.log('Background sync triggered:', event.tag);
  
  if (event.tag === 'background-sync') {
    event.waitUntil(
      // Sync offline actions when network is available
      syncOfflineActions()
    );
  }
});

// Handle push notifications (for future use)
self.addEventListener('push', (event) => {
  if (event.data) {
    const data = event.data.json();
    const options = {
      body: data.body,
      icon: '/favicon.png',
      badge: '/favicon.png',
      tag: 'trackam-notification',
      data: data.url ? { url: data.url } : undefined
    };

    event.waitUntil(
      self.registration.showNotification(data.title || 'TrackAm', options)
    );
  }
});

// Handle notification clicks
self.addEventListener('notificationclick', (event) => {
  event.notification.close();

  if (event.notification.data && event.notification.data.url) {
    event.waitUntil(
      clients.openWindow(event.notification.data.url)
    );
  }
});

// Handle messages from the main thread
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    console.log('Received SKIP_WAITING message');
    self.skipWaiting();
  }
});

// Sync offline actions
async function syncOfflineActions() {
  try {
    // Get offline actions from IndexedDB (implement as needed)
    // This is a placeholder for syncing offline delivery updates, location updates, etc.
    console.log('Syncing offline actions...');
    
    // Example: Sync pending location updates
    // const pendingUpdates = await getOfflineLocationUpdates();
    // for (const update of pendingUpdates) {
    //   await syncLocationUpdate(update);
    // }
  } catch (error) {
    console.error('Failed to sync offline actions:', error);
  }
}

// Cache size management
async function manageCacheSize(cacheName, maxEntries = 100) {
  const cache = await caches.open(cacheName);
  const keys = await cache.keys();
  
  if (keys.length > maxEntries) {
    // Remove oldest entries
    const keysToDelete = keys.slice(0, keys.length - maxEntries);
    await Promise.all(keysToDelete.map(key => cache.delete(key)));
  }
}

// Periodic cache cleanup
setInterval(() => {
  manageCacheSize(API_CACHE, 50);
  manageCacheSize(IMAGES_CACHE, 100);
}, 60000); // Run every minute

console.log('TrackAm Service Worker loaded');